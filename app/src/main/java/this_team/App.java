/*
 * This source file was generated by the Gradle 'init' task
 */
package this_team;

import java.awt.AWTEventMulticaster;
import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.WindowListener;

import javax.swing.JFrame;

import org.jogamp.java3d.Alpha;
import org.jogamp.java3d.BoundingSphere;
import org.jogamp.java3d.BranchGroup;
import org.jogamp.java3d.Canvas3D;
import org.jogamp.java3d.GraphicsConfigTemplate3D;
import org.jogamp.java3d.RotationInterpolator;
import org.jogamp.java3d.Shape3D;
import org.jogamp.java3d.Transform3D;
import org.jogamp.java3d.TransformGroup;
import org.jogamp.java3d.utils.geometry.ColorCube;
import org.jogamp.java3d.utils.universe.SimpleUniverse;
import org.jogamp.vecmath.Point3d;

public class App {

    public static void main(String[] args) {
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D canvas = new Canvas3D(config);

        SimpleUniverse universe = new SimpleUniverse(canvas);

        BranchGroup rootBranchGroup = new BranchGroup();

        TransformGroup rootTransformGroup = new TransformGroup();
        rootTransformGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);

        rootBranchGroup.addChild(rootTransformGroup);


        rootTransformGroup.addChild(new ColorCube(0.4));

        Transform3D yAxis = new Transform3D();
        Alpha rotationAlpha = new Alpha(-1, 4000);

        RotationInterpolator rotator = new RotationInterpolator(rotationAlpha, rootTransformGroup, yAxis, 0.0f, (float) Math.PI * 2.0f);

        BoundingSphere bounds = new BoundingSphere(new Point3d(0.0, 0.0, 0.0), 100.0);

        rotator.setSchedulingBounds(bounds);
        rootBranchGroup.addChild(rotator);

        rootBranchGroup.compile();

        universe.getViewingPlatform().setNominalViewingTransform();
        universe.addBranchGraph(rootBranchGroup);


        JFrame frame = new JFrame("Proof of Concept", config);

        WindowListener listener = new AWTEventMulticaster();

        frame.addWindowListener();





        
    }
}
